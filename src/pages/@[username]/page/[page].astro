---
import authors from '../../../data/authors.json';
import { getCollection } from 'astro:content';
import BaseHead from '../../../components/BaseHead.astro';
import Header from '../../../components/sections/Header.astro';
import Footer from '../../../components/sections/Footer.astro';
import PostCard from '../../../components/ui/card/PostCard.astro';
import BlogPagination from '../../../components/ui/nav/BlogPagination.astro';

export async function getStaticPaths() {
  const PAGE_SIZE = 6;
  const posts = await getCollection('blog');
  const paths = [];

  authors.forEach((author) => {
    const authorPosts = posts.filter((post) => post.data.author === author.id);
    const totalPages = Math.max(1, Math.ceil(authorPosts.length / PAGE_SIZE));

    for (let i = 1; i <= totalPages; i++) {
      paths.push({ params: { username: author.id, page: String(i) } });
    }
  });

  return paths;
}

const PAGE_SIZE = 6;
const { username, page } = Astro.params;
const author = authors.find((a) => a.id === username);
const posts = (await getCollection('blog')).filter(
  (post) => post.data.author === username
);
const totalPages = Math.max(1, Math.ceil(posts.length / PAGE_SIZE));
const currentPage = Math.max(1, parseInt(page, 10));
const start = (currentPage - 1) * PAGE_SIZE;
const end = start + PAGE_SIZE;
const pagePosts = posts.slice(start, end);
---

<html lang="es" data-theme="dark" class="dark">
<head>
  <BaseHead title={`Artículos de ${author?.name} - Página ${currentPage}`} description={`Entradas escritas por ${author?.name}`} />
</head>
<body>
  <Header />
  <main class="mx-auto max-w-6xl px-4 py-10 space-y-6">
    <h1 class="text-3xl font-bold">Artículos de {author?.name}</h1>
    <div class="blog-grid">
      {pagePosts.map((p) => (
        <PostCard post={p} />
      ))}
    </div>
      <BlogPagination
              currentPage={currentPage}
              totalPages={totalPages}
              basePath={`/@${username}/page`}
              firstPagePath={`/@${username}`}
      />
  </main>
  <Footer />
</body>
</html>
